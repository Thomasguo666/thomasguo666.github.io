<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://thomasguo666.github.io</id>
    <title>Thomasguo666的小屋</title>
    <updated>2021-09-08T10:35:28.148Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://thomasguo666.github.io"/>
    <link rel="self" href="https://thomasguo666.github.io/atom.xml"/>
    <subtitle>Знамя советское, знамя народное!</subtitle>
    <logo>https://thomasguo666.github.io/images/avatar.png</logo>
    <icon>https://thomasguo666.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Thomasguo666的小屋</rights>
    <entry>
        <title type="html"><![CDATA[理论力学学习笔记（1）—— 最小作用量原理与 Lagrange 方程]]></title>
        <id>https://thomasguo666.github.io/post/li-lun-li-xue-xue-xi-bi-ji-1-zui-xiao-zuo-yong-liang-yuan-li-yu-lagrange-fang-cheng/</id>
        <link href="https://thomasguo666.github.io/post/li-lun-li-xue-xue-xi-bi-ji-1-zui-xiao-zuo-yong-liang-yuan-li-yu-lagrange-fang-cheng/">
        </link>
        <updated>2021-09-08T07:30:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="引入">引入</h2>
<p>众所周知，在经典力学中，知道了具体的力与约束后，我们只需要应用牛顿三定律就可以列出运动方程</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1009F 【Dominant Indices】]]></title>
        <id>https://thomasguo666.github.io/post/solution-cf1009f/</id>
        <link href="https://thomasguo666.github.io/post/solution-cf1009f/">
        </link>
        <updated>2020-04-07T16:22:26.000Z</updated>
        <content type="html"><![CDATA[<p>首先这个题可以想到是一个DP。状态设计：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>d</mi><mi>e</mi><mi>p</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{u,dep}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示 u 的子树中与 u 距离为 dep 的点的个数。<br>
转移方程如下:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>d</mi><mi>e</mi><mi>p</mi></mrow></msub><mo>=</mo><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>u</mi></msub></mrow></munder><msub><mi>f</mi><mrow><mi>v</mi><mo separator="true">,</mo><mi>d</mi><mi>e</mi><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_{u,dep}=\sum_{v \in son_u} f_{v,dep-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40011em;vertical-align:-1.350105em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.350105em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>然而如果直接暴力转移的话显然会 T 飞或者 M 飞，，所以我们需要一点点的优化。</p>
<hr>
<p>引入一个概念：<strong>长链剖分</strong></p>
<p>我们可以找到一个结点 u 的子树中，到这个节点距离最大的叶子节点。将两点之间的距离计为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">dep_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。那么对于一个节点 u，我们把他的所有孩子中 dep 值最大的称作这个节点的 <strong>长儿子</strong>。</p>
<p>从一个节点开始，每次走向他的长儿子，一直走到叶子节点为止，经过的路径就是一条<strong>长链</strong>。显然，一整棵树会被分成若干条长链，并且每个节点都在恰好一条长链上，每条边要么在长链上，要么把一条长链的顶端连向另一条长链。</p>
<p>代码如下：</p>
<pre><code class="language-cpp">
int dep[1000005],son[1000005];
void dfs1(int u,int fa)
{
    for (int e=head[u];e;e=nex[e]) // 链式前向星
    {
        int v=tail[e];
        if (v==fa) continue;
        dfs1(v,u);
        if (dep[v]&gt;dep[son[u]]) son[u]=v; // 寻找长儿子
    }
    dep[u]=dep[son[u]]+1; // 统计 u 的 dep
}
</code></pre>
<hr>
<p>那么这个东西和 DP 又有什么关系呢？</p>
<p>我们可以采用一个优化策略：对于一个节点 u，我们先对它的长儿子做DP，但这里可以使用一些技巧，让长儿子把 dp 出来的东西直接存到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">f_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里面去（当然观察 dp 式可以发现这边需要错一位），然后再把其他儿子 dp 出来的东西与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">f_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 暴力合并。</p>
<p>这里详细地说一说到底怎么样实现这个优化（貌似其他题解写得都很简略啊……窝看了半天都看不懂，可能是我太菜了）</p>
<p>首先，我们抛弃传统 DP 的预先为每个节点都申请一片空间的写法（空间开销过大），而是在 DP 的过程中，动态的为节点申请（DP数组的）内存，所以这里我们要采用指针的写法。</p>
<p>然后，<strong>我们只对每一个长链的顶端节点申请内存</strong>，而对于一条长链上的所有节点，我们让他们可以公用一片空间。具体地说，假设对节点 u 申请了内存之后，设 v 是 u 的长儿子，我们就把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">f_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 数组的起点（的指针）加一当作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">f_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 数组的起点（的指针，下同），以此类推。这也就是上面说的“让长儿子把 dp 出来的东西直接存到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">f_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里面去”。当然，申请的内存要能装下一条长链。</p>
<p>那么显而易见的，使用了这个优化之后可以把时间和空间都减到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 级别的，因为每个节点都只会在它所在的长链顶端被统计（或者说是被暴力合并）一次。</p>
<p>这部分优化的代码长成这个样子：</p>
<pre><code class="language-cpp">void dfs2(int u,int fa)
{
    f[u][0]=1; // 先算上自己
    if (son[u])
    {
        f[son[u]]=f[u]+1; // 共享内存，这样一步之后，f[son[u]][dep]会被自动保存到f[u][dep-1]
        dfs2(son[u],u);
    }
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==son[u] || v==fa) continue;
        f[v]=now;now+=dep[v]; // 为 v 节点申请内存，大小等于以 v 为顶端的长链的长度
        dfs2(v,u);
        for (int i=1;i&lt;=dep[v];i++)
        {
            f[u][i]+=f[v][i-1]; //暴力合并
        }
    }
}
</code></pre>
<p>当然，在 dp 开始前要先为以树根为顶端的长链申请内存。</p>
<p>然而，光有 dp 数组还没用，我们还要统计答案。</p>
<p>我们可以先令 u 节点的答案为它的长儿子的答案加一。然后在暴力合并的过程当中每次检查当前的 dep 是否优于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">ans_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> （<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">ans_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 就是题目要求的东西），如果是的话那就更新答案。</p>
<p>最后如果发现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>u</mi></msub></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f_{u,ans_u}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，即 u 的子树为一条链，无论在哪个深度下都只有一个点的话，那么就把当前节点的答案 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">ans_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 设为 0 ，这个应该很好理解。</p>
<p>最后放上完整的代码：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
in int cmin(int &amp;a,int b) {return a=min(a,b);}
in int cmax(int &amp;a,int b) {return a=max(a,b);}
int n;
int buf[1000005];
int *f[1000005],*g[1000005],*now=buf;
int nex[2000005],head[1000005],tail[2000005],tot;
int ans[1000005];
void addedge(int u,int v)
{
    nex[++tot]=head[u];
    head[u]=tot;
    tail[tot]=v;
}
int dep[1000005],son[1000005];
void dfs1(int u,int fa) // 长链剖分
{
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==fa) continue;
        dfs1(v,u);
        if (dep[v]&gt;dep[son[u]]) son[u]=v;
    }
    dep[u]=dep[son[u]]+1;
}
void dfs2(int u,int fa) //做dp
{
    f[u][0]=1;
    if (son[u])
    {
        f[son[u]]=f[u]+1; // 共享内存
        dfs2(son[u],u);
        ans[u]=ans[son[u]]+1; //从长孩子节点继承答案
    }
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==son[u] || v==fa) continue;
        f[v]=now;now+=dep[v]; // 分配内存
        dfs2(v,u);
        for (int i=1;i&lt;=dep[v];i++)
        {
            f[u][i]+=f[v][i-1]; //暴力合并
            if (f[u][i]&gt;f[u][ans[u]] || (f[u][i]==f[u][ans[u]] &amp;&amp; i&lt;ans[u])) ans[u]=i; //更新答案
        }
    }
    if (f[u][ans[u]]==1) ans[u]=0;
}
int main()
{
    n=read();
    for (int i=1;i&lt;n;i++)
    {
        int u=read(),v=read();
        addedge(u,v);
        addedge(v,u);
    }
    dfs1(1,0); // 长链剖分
    f[1]=now;now+=dep[1]; // 为根节点的答案分配内存
    dfs2(1,0);
    for (int i=1;i&lt;=n;i++) cout&lt;&lt;ans[i]&lt;&lt;endl;
    return 0;
}

</code></pre>
<p>完结撒花*★,°*:.☆(￣▽￣)/$:*.°★* 。！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P2278 【[HNOI2003]操作系统】]]></title>
        <id>https://thomasguo666.github.io/post/solution-p2278/</id>
        <link href="https://thomasguo666.github.io/post/solution-p2278/">
        </link>
        <updated>2020-04-05T06:26:34.000Z</updated>
        <content type="html"><![CDATA[<p>这道题可以直接使用优先队列来模拟，不过需要注意的是要想清楚执行的流程。</p>
<p>流程如下：</p>
<ol>
<li>创建一个空的优先队列，把“当前运行的进程”和“当前时间”全部清零。</li>
<li>读入一个进程。若已读到文件结尾则创建一个虚拟的进程，其到达时间为无穷大，设这个进程为    p。</li>
<li>每次取出队中优先级最高的进程。若这样的进程有多个，则取出到达时间最早的进程。设为 q。</li>
<li>若“当前时间”到 p 的到达时间内足以运行 q，则运行 q，输出q的答案，返回3；否则运行 q 直到 p 到达为止，并将 q 扔回优先队列，继续执行5。</li>
<li>若p不是虚拟的，则将p加入优先队列。</li>
</ol>
<p>以上为这个程序的大致流程。另外由于数据量比较大，建议不要用iostream，谨防TLE。</p>
<p>代码：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;else if (c==EOF) return -1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
in int cmin(int &amp;a,int b) {return a=min(a,b);}
in int cmax(int &amp;a,int b) {return a=max(a,b);}
struct data
{
    int id,st,t,pri;
    bool operator &lt; (const data &amp;rhs) const
    {
        return pri==rhs.pri?st&gt;rhs.st:pri&lt;rhs.pri;
    }
};
priority_queue&lt;data&gt; q;
data now,nul;
int lst;
int main()
{
    nul=now={0,0,0,0};
    while (true)
    {
        int id=read(),st,t,pri;
        if (id==-1) st=200000001,t=0,pri=0;
        else st=read(),t=read(),pri=read();
        while (!q.empty())
        {
            data p=q.top();q.pop();
            if (p.t&lt;=st-lst)
            {
                lst+=p.t,now=nul;
                printf(&quot;%d %d\n&quot;,p.id,lst);
            }
            else p.t-=(st-lst),lst=st,now=p,q.push(p);
            if (lst==st) break;
        }
        if (id==-1) return 0;
        q.push({id,st,t,pri});
        lst=st;
    }
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P3073 【[USACO13FEB]拖拉机Tractor】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P3073/</id>
        <link href="https://thomasguo666.github.io/post/solution-P3073/">
        </link>
        <updated>2020-04-05T06:24:45.000Z</updated>
        <content type="html"><![CDATA[<p>首先我们简化一下题意。题目的意思是说，让我们找一个包含 $\lceil \frac{n^2}{2} \rceil $ 个点的连通块的相邻格之间高度差的最大值的最小值。</p>
<p>诸如这种最小化 max 值的题目，常见思路是使用<strong>二分答案</strong>将其由<strong>最优化问题</strong>转为<strong>可行性问题</strong>。</p>
<p>具体到这道题，我们二分高度差的最大值，设最大值为 mid。然后我们可以把把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 个格子对应成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 个点，把整张网格当作一张无向图。两个节点之间有边，当且仅当这<strong>两个节点所对应的格子相邻，且高度之差不超过 mid</strong>。</p>
<p>那么接下来我们可以发现，问题转化为：<strong>求出一张 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 阶图中是否存在至少有 $\lceil \frac{n^2}{2} \rceil $ 个点的联通块</strong>。这里我们使用<strong>并查集</strong>即可快速地解决该问题。具体地说，对于图中的每一条边，若其两端点不在同一连通块，则我们将其右端点的连通块和左端点的连通块合并。若新连通块包含了过半数的点，则判定为存在。若对所有边进行了上述操作后，仍未判定为存在，则判定为不存在。</p>
<p>更多实现的细节问题，见代码：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
in int cmin(int &amp;a,int b) {return a=min(a,b);}
in int cmax(int &amp;a,int b) {return a=max(a,b);}
int n;
int a[505][505];
int dx[]={1,0};
int dy[]={0,1};
int st[500005],en[500005];
int fa[250005],sz[250005],tot;
in int zip(int x,int y) // 将点 (x,y) 压缩成一个 [1,n*n] 之间的整数
{
    return (x-1)*n+y;
}
int find(int x) // 并查集寻根函数
{
    return x==fa[x]?x:fa[x]=find(fa[x]); // 路径压缩
}
int check(int mid) // 二分答案的判断函数
{
    tot=0;
    for (int i=1;i&lt;=n;i++)
    {
        for (int j=1;j&lt;=n;j++)
        {
            fa[zip(i,j)]=zip(i,j);
            sz[zip(i,j)]=1;
            for (int k=0;k&lt;2;k++)
            {
                int ii=i+dx[k],jj=j+dy[k];
                if (ii&lt;=n &amp;&amp; jj&lt;=n &amp;&amp; abs(a[i][j]-a[ii][jj])&lt;=mid) // 只有符合要求的才连边
                {
                    st[++tot]=zip(i,j);
                    en[tot]=zip(ii,jj);
                }
            }
        }
    }
    for (int i=1;i&lt;=tot;i++)
    {
        int u=st[i],v=en[i];
        int uu=find(u),vv=find(v);
        if (uu==vv) continue;
        fa[vv]=uu;
        sz[uu]+=sz[vv]; // 合并集合
        sz[vv]=0;
    }
    for (int i=1;i&lt;=n*n;i++)
    {
        if (sz[i]*2&gt;=n*n) return 1;
    }
    return 0;
}
int main()
{
    n=read();
    for (int i=1;i&lt;=n;i++) for (int j=1;j&lt;=n;j++) a[i][j]=read();
    int l=0,r=1000000,ans=1000000;
    while (l&lt;=r) // 二分答案
    {
        int mid=l+r&gt;&gt;1;
        if (check(mid)) r=mid-1,ans=mid;
        else l=mid+1;
    }
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P3091 【[USACO13NOV]视线Line of Sight】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P3091/</id>
        <link href="https://thomasguo666.github.io/post/solution-P3091/">
        </link>
        <updated>2020-04-05T06:20:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="神仙数学题">神仙数学题</h1>
<p>事实上，我们可以对每头牛向谷仓做切线。记第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>头牛向谷仓做切线的两个切点在这头牛这侧所加的弧为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>那么如果第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>头牛和第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>头牛可以互相看到，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">l_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>有交点。</p>
<p>于是接下来我们要解决两个问题：即如何表示和计算这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个弧，以及如何求出这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个弧中有多少对弧相交。</p>
<p>注意到圆心在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>处，所以我们可以用一个弧的两个端点与原点的连线与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>轴正半轴的夹角表示这个弧。</p>
<p>下规定小的角度为左端点，大的角度为右端点。</p>
<p>我们可以先求出牛与原点的连线与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>轴正半轴的夹角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∠</mi><mi>A</mi><mi>O</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">\angle AOB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>，然后再计算两个端点与原点的连线与牛与原点的连线的夹角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∠</mi><mi>A</mi><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">\angle AOC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/04/03/5ca4b8e495fbd.png" alt="rad.PNG" loading="lazy"></figure>
<p>这样左右端点就分别为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∠</mi><mi>A</mi><mi>O</mi><mi>B</mi><mo>±</mo><mi mathvariant="normal">∠</mi><mi>A</mi><mi>O</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">\angle AOB \pm \angle AOC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77557em;vertical-align:-0.08333em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></p>
<pre><code class="language-cpp">db r,pi=acos(-1);
struct point
{
    db x,y;
} a[100005];
struct seg
{
    db l,r;
    bool operator &lt; (const seg &amp;rhs) const
    {
        return l&lt;rhs.l;
    }
} s[200005];
point o={0,0};
db dis(point a,point b)
{
    return sqrt(pow(a.x-b.x,2)+pow(a.y-b.y,2));
}
db angle(point a)
{
    return atan2(a.y,a.x);
}
seg get(point a)
{
    db l=dis(a,o);
    db ang=angle(a); 
    db ang2=acos(r/l);
    if (ang-ang2&lt;0) ang+=2*pi;
    return (seg){ang-ang2,ang+ang2};
}
</code></pre>
<p>接下来就是要求有多少对弧相交。</p>
<p>第一步，破环为链（显然的）。</p>
<p>也就是对每个弧，把它的两个端点都加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">2\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>当作一个新的弧。</p>
<p>第二步，把每个弧按照左端点排个序。</p>
<p>第三部：维护一个堆，其中堆顶元素的右端点最小。对于一段弧<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>把堆里所有右端点比<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的右端点小的弧全部弹出（因为这些弧不会再与以后的任意一个弧相交）</li>
<li>剩下的都与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>相交。把答案加上堆的大小。</li>
<li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i\leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>即这个弧是原有的弧，那么就把这个弧加入堆中。</li>
</ul>
<pre><code class="language-cpp">struct cmp
{
    bool operator () (seg a,seg b)
    {
        return a.r&gt;b.r;
    }
};
int main()
{
	n=read(),r=read();
	long long ans=0;
	for (int i=1;i&lt;=n;i++) a[i].x=read(),a[i].y=read();
	for (int i=1;i&lt;=n;i++) s[i]=get(a[i]);
	for (int i=1;i&lt;=n;i++) s[i+n]=(seg){s[i].l+2*pi,s[i].r+2*pi};
	sort(s+1,s+2*n+1);
	priority_queue&lt;seg,vector&lt;seg&gt;,cmp&gt; q;
	for (int i=1;i&lt;=2*n;i++)
	{
	    while (q.size() &amp;&amp; q.top().r&lt;=s[i].l) q.pop();
	    ans+=q.size();
	    if (i&lt;=n) q.push(s[i]);
    }
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P2657 【[SCOI2009]windy数】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P2657/</id>
        <link href="https://thomasguo666.github.io/post/solution-P2657/">
        </link>
        <updated>2020-04-05T06:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>一道裸的数位DP题</p>
<p>pos记录搜到了数的第几位，pre记录前一位是哪个数字，lead记录上一位是不是前导零，limit记录上一位是否有最高位限制（也就是这位是否有可能超出搜索的上限）。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
int a[15],len;
int f[15][15];
int dfs(int pos,int pre,int lead,int limit)
{
    if (pos&gt;len) return 1;
    if ((!lead)&amp;&amp;(!limit)&amp;&amp;(f[pos][pre]!=-1)) return f[pos][pre];
    int res=limit?a[len-pos+1]:9;
    int ans=0;
    for (int i=0;i&lt;=res;i++)
    {
        if ((!lead)&amp;&amp;abs(i-pre)&lt;2) continue;
        ans+=dfs(pos+1,i,(lead&amp;&amp;!i),limit&amp;&amp;(i==res));
    }
    return ((!lead)&amp;&amp;(!limit))?f[pos][pre]=ans:ans;
}
int solve(int x)
{
    len=0;
    while (x) a[++len]=x%10,x/=10;
    memset(f,-1,sizeof(f));
    return dfs(1,0,1,1);
}
int main()
{
    int a=read(),b=read();
    cout&lt;&lt;solve(b)-solve(a-1)&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4178 【Tree】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P4178/</id>
        <link href="https://thomasguo666.github.io/post/solution-P4178/">
        </link>
        <updated>2020-03-27T08:43:58.000Z</updated>
        <content type="html"><![CDATA[<p>这道题，树上点对路径问题，再看数据范围，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mn>40000</mn></mrow><annotation encoding="application/x-tex">n\leq 40000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>，十有八九是淀粉质。</p>
<p>那么这道题，我们就应该想想看怎么快速地求出一个节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的子树里有多少<strong>经过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的</strong>路径，满足长度不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。</p>
<p>首先，我们可以把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的子树里所有节点的深度全都跑出来（淀粉质常规操作，窝就不多说了），存在一个数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>里面，接着把它排好序（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">STL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">L</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">sort</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span>足矣）。</p>
<p>于此同时我们需要标记出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的子树里每个节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>属于哪棵子树（即<code>color[v]</code>）。对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>的孩子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，我们还需要统计一个<code>cnt[k]</code>，表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>的子树里有多少个节点。</p>
<p>接着我们拿两个指针<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>分别从左右两端向中间扫描<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>。之前我们已经统计好的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">cnt[k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，现在表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">(l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>里有多少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>的子孙。因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>已经排好序了，所以当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo>+</mo><mi>s</mi><mo>[</mo><mi>r</mi><mo>]</mo><mo>≤</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">s[l]+s[r]\leq k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>时，对于任意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">l&lt;i\leq r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo>+</mo><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>≤</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">s[l]+s[i]\leq k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，所以这时候我们给最终答案加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mo>[</mo><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">r-l-cnt[color[s[l]]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>，同时更新<code>cnt</code>，就行了。</p>
<p>放代码：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
#define mid (l+r&gt;&gt;1)
using namespace std;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
int sum,n,k,ans;
int nex[100005],head[100005],tail[100005],weight[100005],tot;
in void addedge(int u,int v,int w)
{
    nex[++tot]=head[u];
    head[u]=tot;
    tail[tot]=v;
    weight[tot]=w;
}
int maxx[100005],sz[100005],root;
int vis[100005];
void findroot(int u,int fa)
{
    sz[u]=1,maxx[u]=0;
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==fa||vis[v]) continue;
        findroot(v,u);
        sz[u]+=sz[v];
        maxx[u]=max(maxx[u],sz[v]); 
    }
    maxx[u]=max(maxx[u],sum-sz[u]);
    if (maxx[u]&lt;maxx[root]) root=u;
}
int dis[100005],color[100005],cnt[100005];
int s[100005],top,c;
void getdis(int u,int fa)
{
    s[++top]=u,cnt[color[u]=c]++;
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (vis[v]||v==fa) continue;
        dis[v]=dis[u]+weight[e];
        getdis(v,u);
    }
}
void calc(int u)
{
    top=0;
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (vis[v]) continue;
        c=v,dis[v]=weight[e];
        getdis(v,u);
    }
    sort(s+1,s+top+1,[](int x,int y){
        return dis[x]&lt;dis[y];
    });
    int l=0,r=top;
    while (true)
    {
        while (r&gt;l &amp;&amp; dis[s[r]]+dis[s[l]]&gt;k) cnt[color[s[r]]]--,r--;
        if (r==l) break;
        ans+=r-l-cnt[color[s[l]]];
        l++;
        if (l) cnt[color[s[l]]]--;
    }
}
void solve(int u)
{
    vis[u]=1;
    calc(u);
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (vis[v]) continue;
        maxx[root=0]=sum=sz[v];
        findroot(v,0);
        solve(root);
    }
}
int main()
{
    n=read();
    for (int i=1;i&lt;n;i++)
    {
        int u=read(),v=read(),w=read();
        addedge(u,v,w);
        addedge(v,u,w);
    }
    k=read();
    maxx[root]=sum=n;
    findroot(1,0);
    solve(root);
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4175 【[CTSC2008]网络管理Network】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P4175/</id>
        <link href="https://thomasguo666.github.io/post/solution-P4175/">
        </link>
        <updated>2019-08-11T09:22:31.000Z</updated>
        <content type="html"><![CDATA[<p>首先，看到这种区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 大值查询的题，还不强制在线，那一般可以整体二分<s>乱搞</s>。</p>
<p>如果你不会整体二分，出门右转 Dynamic Rankings（当然下面也会就这题具体说明一下）。</p>
<p>所以我们模拟一遍所有的修改，同时把每个修改操作改成删去一个数再加上一个数。</p>
<p>注意到这题是树上的问题，所以要个树链剖分。</p>
<p>因为我写习惯了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 小值，所以这里用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>e</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">1e8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">8</span></span></span></span> 减去每个权值。</p>
<p>然后我们用树状数组维护小于等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span> 的数有多少个。如果一个修改操作修改成的数不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span> ，那么就执行这次操作，并且把它加到操作序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里去，否则加到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里去。对于一个询问操作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo separator="true">,</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">{k,l,r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span> ，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 中不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span> 的数大于等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个，就把它放到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里去，否则把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 减去不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span> 的数的个数，再加到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 里去。这样 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">q_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 实际上变为了两个规模更小的子问题，递归处理掉就好了（当然进入下一层递归之前要把这一层递归中做的操作撤销掉）</p>
<p>代码：（复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>3</mn></msup><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlog^3n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ）</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
int a[300005];
int n,m;
int head[100005],tail[200005],nex[200005];
in void addedge(int u,int v,int k)
{
    nex[k]=head[u];
    head[u]=k;
    tail[k]=v;
}
int fa[100005],sz[100005],son[100005],top[100005],l[100005],dep[100005];
void dfs1(int u)
{
    sz[u]=1;
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==fa[u]) continue;
        fa[v]=u,dep[v]=dep[u]+1;
        dfs1(v),sz[u]+=sz[v];
        if (sz[v]&gt;sz[son[u]]) son[u]=v;
    }
}
int tot;
void dfs2(int u,int topf)
{
    top[u]=topf,l[u]=++tot;
    if (!son[u]) return;
    dfs2(son[u],topf);
    for (int e=head[u];e;e=nex[e])
    {
        int v=tail[e];
        if (v==fa[u]||v==son[u]) continue;
        dfs2(v,v);
    }
}
struct data
{
    int l,r,v,p,id;
    data () {}
    data (int l,int r,int v,int p,int id):l(l),r(r),v(v),p(p),id(id) {}
} q[400005],q1[400005],q2[400005];
int ans[100005];
int cnt1,cnt2;
int t[400005];
void add(int x,int v)
{
    for (;x&lt;=n;x+=x&amp;(-x)) t[x]+=v;
}
int sum(int x)
{
    int s=0;
    for (;x;x-=x&amp;(-x)) s+=t[x];
    return s;
}
int query(int x,int y)
{
    int ans=0;
    while (top[x]!=top[y])
    {
        if (dep[top[x]]&lt;dep[top[y]]) swap(x,y);
        ans+=sum(l[x])-sum(l[top[x]]-1);
        x=fa[top[x]];
    }
    if (dep[x]&gt;dep[y]) swap(x,y);
    ans+=sum(l[y])-sum(l[x]-1);
    return ans;
}
void solve(int tl,int tr,int ql,int qr)
{
    if (ql&gt;qr) return;
    if (tl==tr)
    {
        for (int i=ql;i&lt;=qr;i++) ans[q[i].id]=tl;
        return ;
    }
    int mid=tl+tr&gt;&gt;1,j=0,k=0;
    for (int i=ql;i&lt;=qr;i++)
    {
        if (!q[i].id)
        {
            if (q[i].v&lt;=mid)
            {
                add(l[q[i].l],q[i].p);
                q1[++j]=q[i];
            }
            else q2[++k]=q[i];
        }
        else
        {
            int s=query(q[i].l,q[i].r);
            if (s&lt;q[i].v) q[i].v-=s,q2[++k]=q[i];
            else q1[++j]=q[i];
        }
    }
    for (int i=1;i&lt;=j;i++) if (!q1[i].id) add(l[q1[i].l],-q1[i].p); 
    for (int i=1;i&lt;=j;i++) q[ql+i-1]=q1[i];
    for (int i=1;i&lt;=k;i++) q[ql+i+j-1]=q2[i];
    solve(tl,mid,ql,ql+j-1),solve(mid+1,tr,ql+j,qr);
}
int main()
{
    n=read(),m=read();
    for (int i=1;i&lt;=n;i++) a[i]=read();
    for (int i=1;i&lt;n;i++)
    {
        int u=read(),v=read();
        addedge(u,v,i&lt;&lt;1);
        addedge(v,u,i&lt;&lt;1|1);
    }
    dfs1(1);
    dfs2(1,0);
    for (int i=1;i&lt;=n;i++) q[++cnt1]=data(i,0,1e8-a[i],1,0);
    for (int i=1;i&lt;=m;i++)
    {
        int k=read(),l=read(),r=read();
        if (k)
        {
            q[++cnt1]=data(l,r,k,0,++cnt2);
        }
        else
        {
            q[++cnt1]=data(l,0,1e8-a[l],-1,0);
            q[++cnt1]=data(l,0,1e8-(a[l]=r),1,0);
        }
    }
    solve(0,1e8,1,cnt1);
    for (int i=1;i&lt;=cnt2;i++) ((1e8-ans[i])?cout&lt;&lt;int(1e8-ans[i])&lt;&lt;endl:cout&lt;&lt;&quot;invalid request!&quot;&lt;&lt;endl);
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈珂学数据结构——珂朵莉树]]></title>
        <id>https://thomasguo666.github.io/post/What-the-f-k-is-ODT/</id>
        <link href="https://thomasguo666.github.io/post/What-the-f-k-is-ODT/">
        </link>
        <updated>2019-07-29T14:25:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="珂朵莉树">珂朵莉树</h1>
<p>珂朵莉树是一种基于平衡树的暴力数据结构。一般用std::set来实现。</p>
<h2 id="什么时候用珂朵莉树">什么时候用珂朵莉树：</h2>
<ol>
<li>当有区间赋值操作时</li>
<li>当有区间幂次和等线段树树状数组显然不能胜任的操作时</li>
</ol>
<h2 id="定义">定义</h2>
<p>珂朵莉树是把连续的一段值相同的区间当作一个节点对待。下面是一个节点的定义</p>
<pre><code class="language-c++">typedef long long ll;
struct node
{
	int l,r;//节点的左、右端点
	mutable ll v;//如果不加mutable修饰符，那么v变量初始化后就不能修改了。
	node (int l,int r=-1,ll v=0):l(l),r(r),v(v) {}//构造函数
	bool operator &lt;(const node &amp;rhs) const
	{
	    return l&lt;rhs.l;
	}
};
set&lt;node&gt; s;
</code></pre>
<h2 id="基本操作">基本操作</h2>
<h3 id="初始化">初始化</h3>
<pre><code class="language-c++">for (int i=1;i&lt;=n;i++) s.insert(node(i,i,a[i]));
</code></pre>
<h3 id="重要区间分裂">重要：区间分裂</h3>
<p>就是把包含mid的区间[l,r]分裂成[l,mid-1]和[mid,r]，并返回[mid,r]的指针。</p>
<p>具体来讲，是先把区间[l,r]删去，再分别把区间[l,mid),和[mid,r]加入。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/02/03/5c56eb626b143.png" alt="" loading="lazy"></figure>
<pre><code class="language-c++">typedef set&lt;node&gt;::iterator IT;
IT split(int mid)
{
    IT it=s.lower_bound(node(mid));//寻找第一个左端点大于等于k的区间。
    if (it!=s.end()&amp;&amp;it-&gt;l==mid) return it; //如果找到的这个区间的左端点就是mid那么就返回这个区间的指针。
    --it;//否则mid一定在上一个区间里
    int l=it-&gt;l,r=it-&gt;r;
    ll v=it-&gt;v;
    s.erase(it);//删掉区间[l,r]
    s.insert(node(l,mid-1,v));//插入区间[l,mid-1]
    return s.insert(node(mid,r,v)).first; //s.insert()返回的其实是一个pair，其中的first是变量的指针。
}
</code></pre>
<h3 id="核心区间赋值">核心：区间赋值</h3>
<p>就是把区间[l,r]的值全都改为v。</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/02/03/5c56ecd2e058f.png" alt="" loading="lazy"></figure>
<p>区间赋为5后</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2019/02/03/5c56edab6e31d.png" alt="" loading="lazy"></figure>
<pre><code class="language-c++">void assign(int _l,int _r,ll v)
{
    IT r=split(_r+1),l=split(_l); //重点！一定要按照这个次序，否则可能会导致指针失效而RE，下同
    s.erase(l,r); //删除区间[l,r+1)，是一个方便但比较少见的操作
    s.insert(node(_l,_r,v));
}
</code></pre>
<p>这个操作直接使set的大小接近n/k。具体证明见<a href="https://codeforces.com/blog/entry/56135?#comment-398940">这里</a>。但是如果不保证数据随机，那这玩意八成要GG。</p>
<p>其他的操作就可以用暴力了，这里讲几个常见的。</p>
<h3 id="区间加">区间加</h3>
<p>直接加就行了，十分暴力</p>
<pre><code class="language-c++">void add(int _l,int _r,ll v)
{
    IT r=split(_r+1),l=split(_l);
    for (;l!=r;l++) l-&gt;v+=v;
}
</code></pre>
<h3 id="区间k小值">区间k小值</h3>
<p>把区间里每段拿出来排个序就行了。</p>
<pre><code class="language-c++">ll kth(int _l,int _r,int k)
{
    IT r=split(_r+1),l=split(_l); //把区间里
    vector&lt;pair&lt;ll,int&gt; &gt; v;
    v.clear();
    for (;l!=r;l++) v.push_back(pair&lt;ll,int&gt;(l-&gt;v,l-&gt;r-l-&gt;l+1));// 每段拿出来
    sort(v.begin(),v.end());// 排个序
    for (vector&lt;pair&lt;ll,int&gt; &gt;::iterator it=v.begin();it!=v.end();it++)
    {
        k-=it-&gt;second;
        if (k&lt;=0) return it-&gt;first; //就行了
    }
}
</code></pre>
<h3 id="区间幂次和">区间幂次和</h3>
<p>直接快速幂就行了。</p>
<pre><code class="language-c++">ll sum(int _l,int _r,int x,int y)
{
    IT r=split(_r+1),l=split(_l);
    ll ans=0;
    for (;l!=r;l++) 
    {
        ans=((ans+(ll)(l-&gt;r-l-&gt;l+1)*qpow(l-&gt;v,(ll)x,(ll)y))%y+y)%y;
    }
    return ans;
}
</code></pre>
<p>从以上几个操作我们可以看出，珂朵莉树不仅有代码量小，易调试的优点，并且还可以解决许多线段树树状数组等数据结构无法（或难以）胜任的问题。</p>
<p>例题：</p>
<p><a href="https://www.luogu.org/problemnew/show/CF896C">CF896C</a> 模板题</p>
<p>代码：</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
#define IT set&lt;node&gt;::iterator
using namespace std;
typedef long long ll;
int p=1000000007;
ll qpow(ll a,ll k,ll p)
{
    a%=p;
    ll ans=1;
    while (k)
    {
        if (k&amp;1) ans=ans*a%p;
        a=a*a%p;
        k&gt;&gt;=1;
    }
    return ans;
}
struct node
{
	int l,r;
	mutable ll v;
	node (int l,int r=-1,ll v=0):l(l),r(r),v(v) {}
	bool operator &lt;(const node &amp;rhs) const
	{
	    return l&lt;rhs.l;
	}
};
set&lt;node&gt; s;
IT split(int k)
{
    IT it=s.lower_bound(node(k));
    if (it!=s.end()&amp;&amp;it-&gt;l==k) return it;
    --it;
    int l=it-&gt;l,r=it-&gt;r;
    ll v=it-&gt;v;
    s.erase(it);
    s.insert(node(l,k-1,v));
    return s.insert(node(k,r,v)).first;
}
void add(int _l,int _r,ll v)
{
    IT r=split(_r+1),l=split(_l);
    for (;l!=r;l++) l-&gt;v+=v;
}
void assign(int _l,int _r,ll v)
{
    IT r=split(_r+1),l=split(_l);
    s.erase(l,r);
    s.insert(node(_l,_r,v));
}
ll kth(int _l,int _r,int k)
{
    IT r=split(_r+1),l=split(_l);
    vector&lt;pair&lt;ll,int&gt; &gt; v;
    v.clear();
    for (;l!=r;l++) v.push_back(pair&lt;ll,int&gt;(l-&gt;v,l-&gt;r-l-&gt;l+1));
    sort(v.begin(),v.end());
    for (vector&lt;pair&lt;ll,int&gt; &gt;::iterator it=v.begin();it!=v.end();it++)
    {
        k-=it-&gt;second;
        if (k&lt;=0) return it-&gt;first;
    }
}
ll sum(int _l,int _r,int x,int y)
{
    IT r=split(_r+1),l=split(_l);
    ll ans=0;
    for (;l!=r;l++) 
    {
        ans=((ans+(ll)(l-&gt;r-l-&gt;l+1)*qpow(l-&gt;v,(ll)x,(ll)y))%y+y)%y;
    }
    return ans;
}
int n,m;
ll seed,vmax;
ll a[100005];
ll rnd()
{
    ll ans=seed;
    seed=(seed*7+13)%p;
    return ans;
}
int main()
{
    cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;
    for (int i=1;i&lt;=n;i++) a[i]=(rnd()%vmax)+1,s.insert(node(i,i,a[i]));
	s.insert(node(n+1,n+1,0));
	for (int i=1;i&lt;=m;i++)
    {
        int op=int(rnd()%4)+1,l=int(rnd()%n)+1,r=int(rnd()%n)+1,x,y;
        if (l&gt;r) swap(l,r);
        if (op==3) x=int(rnd()%(r-l+1))+1;
        else x=int(rnd()%vmax)+1;
        if (op==4) y=int(rnd()%vmax)+1;
        if (op==1) add(l,r,ll(x));
        else if (op==2) assign(l,r,ll(x));
        else if (op==3) cout&lt;&lt;kth(l,r,x)&lt;&lt;endl;
        else cout&lt;&lt;sum(l,r,x,y)&lt;&lt;endl;
    }
    return 0;
}
</code></pre>
<p><a href="https://www.luogu.org/problemnew/show/P2146">软件包管理器</a> 树链剖分，吸口氧能过</p>
<p>代码：</p>
<pre><code class="language-c++">//luogu-judger-enable-O2
#include &lt;bits/stdc++.h&gt;
using namespace std;
inline int read()
{
    char c=getchar();int ans=0;
    for (;!isdigit(c);c=getchar());
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+c-48;
    return ans;
}
int dep[100005],top[100005],l[100005],sz[100005],fa[100005],son[100005],b[100005],a[100005];
vector&lt;int&gt; G[100005];
void dfs1(int u)
{
    sz[u]=1;
    for (register int i=0;i&lt;G[u].size();i++) 
    {
        int v=G[u][i];
        if (v==fa[u]) continue;
        dep[v]=dep[u]+1,fa[v]=u;
        dfs1(v),sz[u]+=sz[v];
        if (sz[v]&gt;sz[son[u]]) son[u]=v;
    }
}
int tot=0;
void dfs2(int u,int h)
{
    l[u]=++tot,a[tot]=b[u],top[u]=h;
    if (!son[u]) return ;
    dfs2(son[u],h);
    for (register int i=0;i&lt;G[u].size();i++)
    {
        int v=G[u][i];
        if (v==fa[u] || v==son[u]) continue;
        dfs2(v,v);
    }
}
struct node
{
    int l,r;
    mutable int v;
    node (int l,int r=-1,int v=0):l(l),r(r),v(v) {}
    bool operator &lt; (const node &amp;rhs) const
    {
        return l&lt;rhs.l;
    }
};
set&lt;node&gt; s;
typedef set&lt;node&gt;::iterator IT;
inline IT split(int k)
{
    IT it=s.lower_bound(node(k));
    if (it!=s.end() &amp;&amp; it-&gt;l==k) return it;
    --it;
    int l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;
    s.erase(it);
    s.insert(node(l,k-1,v));
    return s.insert(node(k,r,v)).first;
}
inline int assign(int l,int r,int v)
{
    IT rp=split(r+1),lp=split(l);
    int before=0,after=(r-l+1)*v;
    for (register IT it=lp;it!=rp;it++) before+=(it-&gt;r-it-&gt;l+1)*(it-&gt;v);
    s.erase(lp,rp);
    s.insert(node(l,r,v));
    return abs(after-before); //assign的同时要计算改变了多少个安装包的状态。
}
inline int install(int u,int v)
{
    int ans=0;
    while (top[u]!=top[v])
    {
        if (dep[top[u]]&lt;dep[top[v]]) swap(u,v);
        ans+=assign(l[top[u]],l[u],1);
        u=fa[top[u]];
    }
    if (dep[u]&gt;dep[v]) swap(u,v);
    ans+=assign(l[u],l[v],1);
    return ans;
}
inline int uninstall(int u)
{
    return assign(l[u],l[u]+sz[u]-1,0);
}
inline void addedge(int u,int v)
{
    G[u].push_back(v),G[v].push_back(u);
}
int main()
{
    int n,m;
    n=read();
    s.insert(node(1,n+1,0)); 
    for (register int i=2;i&lt;=n;i++) addedge(i,read()+1);//所有软件包编号加一，方便计算。
    m=read();
    dfs1(1);
    dfs2(1,1);
    for (register int i=1;i&lt;=m;i++)
    {
        char opt[20];
        scanf(&quot;%s&quot;,opt);
        int x=read();
        if (opt[0]=='i') printf(&quot;%d\n&quot;,install(x+1,1));
        else printf(&quot;%d\n&quot;,uninstall(x+1));
     } 
    return 0;
}
</code></pre>
<p><a href="https://www.luogu.org/problemnew/show/P2486">染色</a> 同样是树链剖分，然而比较困难的地方在于信息的整合，看注释：</p>
<p>代码:</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;
int read()
{
    char c=getchar();int ans=0,f=1;
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+c-48;
    return ans*f;
}
struct data
{
	int lc,rc,len;
	data (int lc=0,int rc=0,int len=0):lc(lc),rc(rc),len(len) {};
	data operator + (const data &amp;rhs) const //整合信息
	{
		data ans;
		if (!len) return rhs;
		if (!(rhs.len)) return data(lc,rc,len); //如果有一段长度为0，就返回另一段
		if (rc==rhs.lc) ans.len=len+rhs.len-1; //如果两段的端点是一种颜色，那么段数减一
		else ans.len=len+rhs.len; //否则段数不变
		ans.lc=lc,ans.rc=rhs.rc;
		return ans;
	}
};
struct node
{
	int l,r;
	mutable int v;
	node (int l,int r=-1,int v=0):l(l),r(r),v(v) {}
	bool operator &lt; (const node &amp;rhs) const
	{
		return l&lt;rhs.l;
	}
};
set&lt;node&gt; s;
typedef set&lt;node&gt;::iterator IT;
IT split(int k)
{
	IT it=s.lower_bound(node(k));
	if (it!=s.end() &amp;&amp; it-&gt;l==k) return it;
	--it;
	int l=it-&gt;l,r=it-&gt;r,v=it-&gt;v;
	s.erase(it);
	s.insert(node(l,k-1,v));
	return s.insert(node(k,r,v)).first;
}
void assign(int l,int r,int v)
{
	IT rp=split(r+1),lp=split(l);
	s.erase(lp,rp);
	s.insert(node(l,r,v));
}
data query(int l,int r)
{
	IT rp=split(r+1),lp=split(l);
	data ans;
	for (IT it=lp;it!=rp;it++)
	{
		ans=ans+data(it-&gt;v,it-&gt;v,1);
	}
	return ans;
}
int l[100005],fa[100005],son[100005],dep[100005],sz[100005],top[100005],a[100005],b[100005];
vector&lt;int&gt; G[100005];
void dfs1(int u)
{
	sz[u]=1;
	for (int i=0;i&lt;G[u].size();i++)
	{
		int v=G[u][i];
		if (sz[v]) continue;
		dep[v]=dep[u]+1,fa[v]=u;
		dfs1(v),sz[u]+=sz[v];
		if (sz[v]&gt;sz[son[u]]) son[u]=v;
	}
}
int tot=0;
void dfs2(int u,int h)
{
	l[u]=++tot,a[tot]=b[u],top[u]=h;
	if (!son[u]) return;
	dfs2(son[u],h);
	for (int i=0;i&lt;G[u].size();i++)
	{
		int v=G[u][i];
		if (v!=fa[u]&amp;&amp;v!=son[u]) dfs2(v,v);
	}
}
void upd(int u,int v,int k)
{
	while(top[u]!=top[v])
	{
		if (dep[top[u]]&lt;dep[top[v]]) swap(u,v);
		assign(l[top[u]],l[u],k);
		u=fa[top[u]];
	}
	if (dep[u]&gt;dep[v]) swap(u,v);
	assign(l[u],l[v],k);
}
int qnum(int u,int v)
{
	data a,b; //a负责存储u这边的信息，b负责存储v这边的信息，讨厌的地方在于不能swap
	while (top[u]!=top[v])
	{
		if (dep[top[u]]&lt;dep[top[v]]) b=query(l[top[v]],l[v])+b,v=fa[top[v]];
		else a=query(l[top[u]],l[u])+a,u=fa[top[u]];
	}
	if (dep[u]&gt;dep[v]) a=query(l[v],l[u])+a;
	else b=query(l[u],l[v])+b;
	swap(a.lc,a.rc);
	return (a+b).len;
}
void addedge(int u,int v)
{
	G[u].push_back(v),G[v].push_back(u);
}
int main()
{
	int n=read(),m=read();
	for (int i=1;i&lt;=n;i++) b[i]=read();
	for (int i=1;i&lt;n;i++) addedge(read(),read());
	dfs1(1);
	dfs2(1,1);
	for (int i=1;i&lt;=n;i++) s.insert(node(i,i,a[i]));
	for (int i=1;i&lt;=m;i++)
	{
		char opt;
		int x,y,z;
		opt=getchar(),x=read(),y=read();
		if (opt=='C')
		{
			z=read();
			upd(x,y,z);
		}
		else printf(&quot;%d\n&quot;,qnum(x,y));
	}
	return 0;
} 
</code></pre>
<p>完结撒花！！！<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>
<p>（P.S. 按照yfz的说法，有一种复杂度正确的ODT，然而我不会……）</p>
<p>（再P.S. 如果窝学会了这个东西会找时间写的）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P3628 【[APIO2010]特别行动队】]]></title>
        <id>https://thomasguo666.github.io/post/solution-P3628/</id>
        <link href="https://thomasguo666.github.io/post/solution-P3628/">
        </link>
        <updated>2019-06-04T12:09:39.000Z</updated>
        <content type="html"><![CDATA[<p>设</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i=\sum_{j=1}^ia_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2254460000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>我们可以先列一个简单的dp方程:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>=</mo><munderover><mi>min</mi><mo>⁡</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo>{</mo><mi>A</mi><mo>(</mo><msub><mi>S</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mi>j</mi></msub><msup><mo>)</mo><mn>2</mn></msup><mo>+</mo><mi>B</mi><mo>(</mo><msub><mi>S</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mi>j</mi></msub><mo>)</mo><mo>+</mo><mi>C</mi><mo>}</mo></mrow><annotation encoding="application/x-tex">f(i)=\min_{j=1}^{i-1} \{A(S_i-S_j)^2+B(S_i-S_j)+C\}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.2932960000000002em;vertical-align:-0.863772em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4295240000000002em;"><span style="top:-2.0723360000000004em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span><span style="top:-3.56786em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.863772em;"><span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.150216em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">}</span></span></span></span></span></p>
<p>先去掉<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span></span></span></span>符号，然后整理：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub><msub><mi>S</mi><mi>j</mi></msub><mo>−</mo><mi>A</mi><msubsup><mi>S</mi><mi>i</mi><mn>2</mn></msubsup><mo>−</mo><mi>B</mi><msub><mi>S</mi><mi>i</mi></msub><mo>−</mo><mi>C</mi><mo>+</mo><mi>f</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>j</mi><mo>)</mo><mo>+</mo><mi>A</mi><msubsup><mi>S</mi><mi>j</mi><mn>2</mn></msubsup><mo>−</mo><mi>B</mi><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">2AS_iS_j-AS_i^2-BS_i-C+f(i)=f(j)+AS_j^2-BS_j
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2472159999999999em;vertical-align:-0.383108em;"></span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>我们把所有与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>有关的全部项移到左边，其余移到右边。并且以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>为主元，把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">S_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>等看作变量，其余看作常数。然后我们确保<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为正数。（为了方便，我们把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>均乘以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>，然后求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>的最小值）</p>
<p>我们让一条斜率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的直线依次经过这<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个点，然后找到使它在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>轴上的截距最小的点即可。</p>
<p>注意到当直线<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_{j-1}P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的斜率大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub><msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_jP_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>一定不是我们要找的点，所以我们可以用单调队列来维护所有的决策点，每次插入一个新决策点时，先检查它与队首构成的直线的斜率，以及队首的两个点构成的直线的斜率，如果不对就把队首扔掉，并继续。（详见代码）</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.org/upload/pic/60134.png" alt="" loading="lazy"></figure>
<p>这个不对</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.org/upload/pic/60135.png" alt="" loading="lazy"></figure>
<p>这个对</p>
<p>并且，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><mi>P</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">P_{j-1}Pj</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>的斜率大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{j-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>优于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub><msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_jP_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的斜率小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，说明<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>优于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。因此，如果有三个点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{j-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><msub><mi>P</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>P</mi><mi>j</mi></msub></mrow></msub><mo>&lt;</mo><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>K</mi><mrow><msub><mi>P</mi><mi>j</mi></msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></mrow></msub></mrow><annotation encoding="application/x-tex">K_{P_{j-1}P_j}&lt;2AS_i\leq K_{P_jP{j+1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03065em;vertical-align:-0.34731999999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833100000000004em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03065em;vertical-align:-0.34731999999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833100000000004em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>就是最优决策点。在本题中，由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>单调递增，所以若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub><msub><mi>P</mi><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_jP_{j+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的斜率小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，就可以把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">P_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>扔掉，这样队尾永远是当前最优的决策点。但是，在某些问题中，斜率并不是单调递增的，这时不能把队尾扔掉，而是每次要使用二分查找的技巧，找到第一条斜率不小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>A</mi><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">2AS_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的直线。</p>
<p>然后就看代码吧：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#define debug printf(&quot;Running %s on line %d...\n&quot;,__FUNCTION__,__LINE__)
#define in inline
#define re register
#define sqr(i) (ll((i))*(i))
#define F(i) (A*sqr(s[(i)])-B*s[(i)]+f[(i)])
using namespace std;
typedef long long ll;
typedef double db;
in int read()
{
    int ans=0,f=1;char c=getchar();
    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;
    for (;isdigit(c);c=getchar()) ans=(ans&lt;&lt;3)+(ans&lt;&lt;1)+(c^48);
    return ans*f;
}
int a[1000005],s[1000005];
int q[1000005],l,r;
ll f[1000005];
ll A,B,C;
// f(i)=f(j)+A(s[i]-s[j])^2+B(s[i]-s[j])+C
//     =f(j)+A*s[i]^2-2As[i]s[j]+As[j]^2+Bs[i]-Bs[j]+C
// 2As[i]s[j]-As[i]^2-Bs[i]-C+f(i)=f(j)+As[j]^2-Bs[j]
int main()
{
    int n=read();
    A=-read(),B=-read(),C=-read();
    for (int i=1;i&lt;=n;i++) a[i]=read(),s[i]=s[i-1]+a[i];
    l=r=1;
    for (int i=1;i&lt;=n;i++)
    {
        while (r&gt;l &amp;&amp; (F(q[l+1])-F(q[l]))&lt;2*A*s[i]*(s[q[l+1]]-s[q[l]])) l++;
        f[i]=f[q[l]]+A*sqr(s[i]-s[q[l]])+B*(s[i]-s[q[l]])+C;
        while (r&gt;l &amp;&amp; (F(q[r])-F(q[r-1]))*(s[i]-s[q[r]])&gt;(F(i)-F(q[r]))*(s[q[r]]-s[q[r-1]])) r--;
        q[++r]=i;
    }
    cout&lt;&lt;-f[n]&lt;&lt;endl;
    return 0;
}

</code></pre>
]]></content>
    </entry>
</feed>